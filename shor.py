import socket
import math
import fractions
from decimal import *

class Shors:

	def __init__(self):
		self.n = 26825926351488399110544112048484691246984742691774090660107762225282840929762385037237484102637951592668796347757856945214753994377357682664648613794306195119897925017866009997263150512915863644811383848031675519987679409974919170391509730554029294470146117971727639921754779476671008586376903725402571129
		self.x = 1234567899002948572095479072038957423098574389025702943570429857023498574029572409857243890574395847208395798204309845704239570293485904852742095872043348674239085730489574239085709348574823957483957204985709438570948237504982357204395782394573042985704293875209457023944857394857423095423498572034857329
		self.exponent = 2048
		# self.exponent = int(2 * math.log(self.n, ))

	def run(self):
		self.c = self.get_num_from_server()
		q = self.pick_q(self.n)

		ri = self.get_convergents(self.c, q)

		val = pow(self.x, ri, self.n)
		i = 1
		while val != 1 and i < 100:
			val = pow(self.x, ri*i, self.n)
			i += 1

		order = -99999
		if val == 1:
			order = ri * i
			print "ORDER: " , str(ri * i)


	def get_fact(self, order):
		r = pow(self.x, order//2, self.n)
		p = fractions.gcd(r+1, self.n)
		q = fractions.gcd(r-1, self.n)

		if p*q = self.n:
			print "HELL YEAH"
			return True
		else:
			return False


	def pick_q(self, n):
		q = 1
		while True:
			q *= 2
			if q > 2 * (n**2):
				q = q/4*3
				return q


	def get_num_from_server(self):
		s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		s.connect(("annai.cs.colorado.edu", 443))
		s.send(str(self.x) + " " + str(self.exponent) + "\n")

		while True:
			c = s.recv(2048)
			if len(c) > 5:
				return c


	def get_continued_fraction(self, num, denom):
		getcontext().prec = 500
		num = long(num)
		denom = long(denom)
		ans = []
		while denom > 0:
			a = num // denom
			if denom != 0:
				ans.append(a)
 
 			remain = num - (denom * a)
			num = denom
			denom = remain

		return ans

	def get_convergents(self, num, denom):
		a = self.get_continued_fraction(num, denom)
		p = []
		q = []
		index = len(a)
		p.append(a[0])
		p.append(a[0] * a[1] + 1)
		q.append(1)
		q.append(a[1])

		for i in range(2, len(a)):
			pval = a[i] * p[i-1] + p[i-2]
			qval = a[i] * q[i-1] + q[i-2]
			if qval > self.n:
				ri = q[i-1]
				return ri
			p.append(pval)
			q.append(qval)

		return False



# Shors().get_convergents(153.0, 53.0)
# Shors().run()


# def test():
# 	q = 1444682750313476054402360768109706876893822968142426790243253652491777619966919313067072693028580254183205274980749101318156103453807126928646332877268565436629841209976419631768026847409739439493241502570393721831297526596901703901373062774768896570976748132051660345921855087200152835634688395222601162740077719094887450743646248047943319506713279010444566103432080402642385342391213490701478358784206678720978361534407519878041670522941722537774012876148519839252254024954623887377611865180444627559319669421642573085503846284822508631864884130644326090911489820574219358175038627323729640909741335523622912
# 	c = 672725419536041975161782572570326106564234984654126936352097297801319876379394359269109521572075941695107178878417214760940250337208776450610643999172949350388588787462757989063030543934777842552318151671273734595491509564862905226568386194337849179665479535457665363613392606194766453584573284924668844719784446181217382772706796110246302727718429591284258219815482284160119759085993372057481389435657140706352582508188905044833992045297015997713077188202658272019022918613427157715269771521154858354669235058906415747487457606126647231704533119316297880200624763418155882469946764800061519760453370111364814192016
# 	order = 40238889527232598665816168072727036870477114037661135990161643337924261394643577555856226153956927389003194521636785417822130991566036523996972920691458797553197926970728242108697598680665450919936833307933221205990663327050045226090470697448250042316553686548401015588314909942059610565361949523880578326
# 	fact = Shors().get_fact(order)
# 	print Shors().check_fact(fact)
	# print Shors().get_convergents(c, q)

test()

